# Below I define functions that get a positive integer number n as an input and return a plot of number of the ways all first n even numbers can be decomposed as sum of two prime numbers.


# this makes a list of all the decompositions of 2,4,...,2n
def list_of_all_decompositions(n):
    AllDecompositions = []
    Primes = primes_first_n(floor(n/2)+1)
    max = len(Primes)
    
    for i in range(1,n):
        for j in range(max):
            for k in range(max):
                if 2*i == Primes[j] + Primes[k]:
                    AllDecompositions = AllDecompositions + [[2*i,Primes[j],Primes[k]]]
    
    return(AllDecompositions)

# this counts the number of decompositions for each i=2,4,...,2n-4
def number_of_decompositions(L,n):
    NumberOfDecompositions = []
    for i in range(2,n-1):
        count = 0
        j = 0
        while j < (len(L)):
            while 2 * i == L[j][0]:
                count = count + 1
                j = j + 1
            j = j+1
        NumberOfDecompositions = NumberOfDecompositions + [[2*i,count]]
    
    return(NumberOfDecompositions)

# this calls the previous two functions and draws the plot
def plot_number_of_decompositions(n):    
    L = list_of_all_decompositions(n+2)
    Points = number_of_decompositions(L,n+2)
    point(Points).show()
